{"version":3,"sources":["components/Navbar.js","components/TextForms.js","components/Alert.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","aboutText","onClick","toggleMode","role","htmlFor","TextForms","useState","text","setText","heading","placeholder","rows","value","onChange","event","console","log","target","style","backgroundColor","color","newtext","toUpperCase","showalert","toLowerCase","words","split","uppercaseword","forEach","element","charAt","slice","newText","replace","trim","str","prompt","includes","alert","document","getElementById","select","navigator","clipboard","writeText","length","defaultProps","Alert","msg","About","mystyle","setmystyle","App","setmode","setalert","message","setTimeout","body","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.11977a6f.chunk.js","sourcesContent":["// rfc\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n        </li>\r\n        \r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link disabled\" href=\"/\">Disabled</a>\r\n        </li>\r\n      </ul>\r\n      <div>\r\n      <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n      <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n      <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Default switch checkbox input</label>\r\n    </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText  : PropTypes.string.isRequired\r\n  }\r\n\r\n// Specifies the default values for props:\r\nNavbar.defaultProps = {\r\n    title: 'Stranger'\r\n  };"," import React , {useState} from \"react\";\r\n\r\nexport default function TextForms(props) {\r\n  const [text,setText] = useState(\"\")\r\n  const handleUpperCaseClick=()=>{\r\n    let newtext = text.toUpperCase();\r\n    setText(newtext);\r\n    props.showalert(\"changes to upper case\",\"success\")\r\n  };\r\n  const handleLowerCaseClick=()=>{\r\n    let newtext = text.toLowerCase();\r\n    setText(newtext);\r\n    props.showalert(\"changes to lower case\",\"success\")\r\n  };\r\n  const handleclearClick=()=>{\r\n    let newtext = \"\";\r\n    setText(newtext);\r\n  };\r\n  const handleOnChange=(event)=>{\r\n    console.log(\"OnChange\")\r\n    setText(event.target.value)\r\n  };\r\n  \r\n  const capitalFirstLetter = ()=>{\r\n    let words = text.split(\" \")\r\n   let uppercaseword = ' '\r\n    words.forEach(element => {\r\n       uppercaseword += element.charAt(0).toUpperCase() + element.slice(1) + \" \"\r\n    });\r\n    setText(uppercaseword)\r\n    props.showalert(\"changed first letter to Capital\",\"success\")\r\n}\r\n\r\nconst handleExtraSpaces = ()=>{\r\n  let newText = text.replace(/\\s+/g, ' ').trim();\r\n  setText(newText)\r\n  }\r\n  const handleSrchClick = () => {\r\n    let str = prompt(\"enter the string you wanna search :\");\r\n    let newText = text.includes(str, 0);\r\n    if (newText === true){\r\n      alert(\"the string \" + str + \" is present..\");\r\n    }\r\n    else{\r\n      alert(\"the string \" + str + \" is not present..\");\r\n    }\r\n}\r\n\r\nconst handleCopy=()=>{\r\n  let text=document.getElementById(\"myBox\");\r\n  text.select();\r\n  navigator.clipboard.writeText(text.value);\r\n}\r\n  \r\n  return (\r\n    <>\r\n    <div className={`text-${props.mode === 'light'?'dark':'light'} container`}>\r\n        <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"myBox\"\r\n          placeholder=\"Enter text here\"\r\n          rows=\"8\"\r\n          value={text} onChange={handleOnChange}\r\n          style={{backgroundColor : props.mode === 'light'?'#fff':'grey',color : props.mode === 'light'?'black':'#fff'}}\r\n        ></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleUpperCaseClick}>Covert to Uppercase</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleLowerCaseClick}>Covert to Lowercase</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={capitalFirstLetter}>Make First Letter Capital</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleSrchClick}>Search the string</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy the string</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleclearClick}>clear</button>\r\n      <div className=\"container my-2\">\r\n      <p>Now of Words {text.split(\" \").length} and no of characters {text.length}</p>\r\n      <p>\r\n        {0.008 * text.split(\" \").length } of read...\r\n      </p>\r\n    </div>\r\n    </div>\r\n    \r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n  return (\r\n   props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{props.alert.type}</strong> {props.alert.msg}\r\n</div>\r\n  )\r\n}\r\n\r\nexport default Alert","import React,{useState} from 'react'\r\n\r\nexport default function About() {\r\n    const [mystyle,setmystyle] = useState({\r\n            color: 'white',\r\n            backgroundColor: 'black'\r\n        }\r\n    )\r\n    const [text,setText] = useState(\"Enable light mode\")\r\n        const toggle = ()=>{\r\n            console.log('toggle')\r\n            if(mystyle.color === 'white')\r\n            {\r\n                setmystyle({\r\n                    color: 'black',\r\n                    backgroundColor: 'white'\r\n                })\r\n                setText(\"Enable dark Mode\")\r\n                \r\n            }\r\n            else\r\n            {\r\n                setmystyle({\r\n                    color: 'white',\r\n                    backgroundColor: 'black'\r\n                })\r\n                setText(\"Enable Light Mode\")\r\n            }\r\n        }\r\n  return (\r\n    <div className=\"container\" >\r\n        \r\n        <div className=\"accordion\" id=\"accordionExample\" >\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n      <button className=\"accordion-button\" type=\"button\" style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body \" style={mystyle}>\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n      <button className=\"accordion-button collapsed\" type=\"button\" style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={mystyle}>\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n      <button className=\"accordion-button collapsed\" type=\"button\" style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={mystyle}>\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n    <div>\r\n    <button type=\"button\" onClick={toggle} className=\"btn btn-primary\">{text}</button>\r\n    </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n","// import logo from './logo.svg';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar'\r\nimport TextForms from './components/TextForms'\r\nimport Alert from './components/Alert'\r\nimport About from './components/About'\r\nimport React,{useState} from 'react'\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route,\r\n} from \"react-router-dom\";\r\nfunction App() {\r\n  const [mode, setmode] = useState(\"light\")\r\n  const [alert,setalert] = useState(null);\r\n\r\n  // alert ek object hai jo phle null tha or ab hum usko value de ra hai\r\n\r\n  const showalert = (message,type)=>{\r\n      setalert({\r\n        msg : message,\r\n        type : type\r\n      })\r\n\r\n      setTimeout(() => {\r\n        setalert(null)\r\n      }, 2000);\r\n  }\r\n  const toggleMode = () =>{\r\n      if(mode === \"light\")\r\n      {\r\n        setmode(\"dark\");\r\n        document.body.style.backgroundColor = \"rgb(0 75 124)\"\r\n        showalert(\"Dark mode enabled\",\"success\")\r\n      }\r\n      else\r\n      {\r\n        setmode(\"light\");\r\n      document.body.style.backgroundColor = \"#fff\"\r\n      showalert(\"Light mode enabled\",\"success\")\r\n      }\r\n  }\r\n  return ( \r\n    <>\r\n     \r\n    <Navbar title=\"Textutils\" aboutText=\"about\" mode={mode} toggleMode={toggleMode}/>\r\n    \r\n    <Alert alert={alert}/>\r\n    <div className=\"container\">\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"/\" element={<TextForms heading=\"Enter text to analyze\"  mode={mode} showalert={showalert} />} />\r\n        <Route path=\"/about\" element={ <About />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n        </div>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}